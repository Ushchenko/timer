  const [seconds, setSeconds] = useState((seconds) => {
    CountdownFunctions.countSeconds(endDate, curDate, seconds)
  })
  const [minutes, setMinutes] = useState((minutes) => {
    CountdownFunctions.countMinutes(endDate, curDate, minutes)
  })
  const [hours, setHours] = useState((hours) => {
    CountdownFunctions.countHours(endDate, curDate, hours)
  })
  const [days, setDays] = useState((days) => {
    CountdownFunctions.countDays(endDate, curDate, days)
  })

  const [isShownCalendar, setIsShownCalendar] = useState(false)

  useEffect(() => {
    const interval = setInterval(() => {
      //curDate = new Date() 
      setSeconds((prevSeconds) => {
        if (endDate - curDate < 0) return prevSeconds = `00`
        if (Math.floor((endDate - curDate) / 1000 % 60) < 10)
          return prevSeconds = `0${Math.floor((endDate - curDate) / 1000 % 60)}`
        else return prevSeconds = `${Math.floor((endDate - curDate) / 1000 % 60)}`
      })
    }, 1000)

    return () => clearInterval(interval) 
  }, []) 

  useEffect(() => {
    const interval = setInterval(() => {
      //curDate = new Date() 
      setMinutes((prevMinutes) => {
        if (endDate - curDate < 0) return prevMinutes = `00`
        if (Math.floor((endDate - curDate) / 1000 / 60 % 60) < 10)
          return prevMinutes = `0${Math.floor((endDate - curDate) / 1000 / 60 % 60)}`
        else return prevMinutes = `${Math.floor((endDate - curDate) / 1000 / 60 % 60)}`
      })
    }, 1000)

    return () => clearInterval(interval) 
  }, []) 

  useEffect(() => {
    const interval = setInterval(() => {
      //curDate = new Date() 
      setHours((prevHours) => {
        if (endDate - curDate < 0) return prevHours = `00`
        if (Math.floor((endDate - curDate) / 1000 / 3600 % 60 % 24) < 10)
          return prevHours = `0${Math.floor((endDate - curDate) / 1000 / 3600 % 60 % 24)}`
        else return prevHours = `${Math.floor((endDate - curDate) / 1000 / 3600 % 60 % 24)}`
      })
    }, 1000)

    return () => clearInterval(interval)
  }, []) 

  useEffect(() => {
    const interval = setInterval(() => {
      //curDate = new Date() 
      setDays((prevDays) => {
        if (endDate - curDate < 0) return prevDays = `00`
        if (Math.floor((endDate - curDate) / 1000 / 3600 / 24) < 10)
          return prevDays = `0${Math.floor((endDate - curDate) / 1000 / 3600 / 24)}`
        else return prevDays = `${Math.floor((endDate - curDate) / 1000 / 3600 / 24)}`
      })
    }, 1000)

    return () => clearInterval(interval)
  }, []) 